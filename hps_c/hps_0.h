#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file '/cygdrive/d/Documents/qdesigns/digital_still_camera/soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'onchip_memory2_0', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY2_0_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY2_0_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_MEMORY2_0_COMPONENT_NAME onchip_memory2_0
#define ONCHIP_MEMORY2_0_BASE 0x0
#define ONCHIP_MEMORY2_0_SPAN 65536
#define ONCHIP_MEMORY2_0_END 0xffff
#define ONCHIP_MEMORY2_0_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY2_0_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY2_0_CONTENTS_INFO ""
#define ONCHIP_MEMORY2_0_DUAL_PORT 0
#define ONCHIP_MEMORY2_0_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_INIT_CONTENTS_FILE soc_system_onchip_memory2_0
#define ONCHIP_MEMORY2_0_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY2_0_INSTANCE_ID NONE
#define ONCHIP_MEMORY2_0_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY2_0_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_MEMORY2_0_SINGLE_CLOCK_OP 0
#define ONCHIP_MEMORY2_0_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY2_0_SIZE_VALUE 65536
#define ONCHIP_MEMORY2_0_WRITABLE 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_DATA_WIDTH 64
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip_memory2_0

/*
 * Macros for device 'pio_led', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_LED_'.
 * The prefix is the slave descriptor.
 */
#define PIO_LED_COMPONENT_TYPE altera_avalon_pio
#define PIO_LED_COMPONENT_NAME pio_led
#define PIO_LED_BASE 0x0
#define PIO_LED_SPAN 16
#define PIO_LED_END 0xf
#define PIO_LED_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_LED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_LED_CAPTURE 0
#define PIO_LED_DATA_WIDTH 8
#define PIO_LED_DO_TEST_BENCH_WIRING 0
#define PIO_LED_DRIVEN_SIM_VALUE 0
#define PIO_LED_EDGE_TYPE NONE
#define PIO_LED_FREQ 50000000
#define PIO_LED_HAS_IN 0
#define PIO_LED_HAS_OUT 1
#define PIO_LED_HAS_TRI 0
#define PIO_LED_IRQ_TYPE NONE
#define PIO_LED_RESET_VALUE 255

/*
 * Macros for device 'SDA', class 'altera_avalon_pio'
 * The macros are prefixed with 'SDA_'.
 * The prefix is the slave descriptor.
 */
#define SDA_COMPONENT_TYPE altera_avalon_pio
#define SDA_COMPONENT_NAME SDA
#define SDA_BASE 0x1000
#define SDA_SPAN 16
#define SDA_END 0x100f
#define SDA_BIT_CLEARING_EDGE_REGISTER 0
#define SDA_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SDA_CAPTURE 0
#define SDA_DATA_WIDTH 1
#define SDA_DO_TEST_BENCH_WIRING 0
#define SDA_DRIVEN_SIM_VALUE 0
#define SDA_EDGE_TYPE NONE
#define SDA_FREQ 50000000
#define SDA_HAS_IN 0
#define SDA_HAS_OUT 0
#define SDA_HAS_TRI 1
#define SDA_IRQ_TYPE NONE
#define SDA_RESET_VALUE 0

/*
 * Macros for device 'SCL', class 'altera_avalon_pio'
 * The macros are prefixed with 'SCL_'.
 * The prefix is the slave descriptor.
 */
#define SCL_COMPONENT_TYPE altera_avalon_pio
#define SCL_COMPONENT_NAME SCL
#define SCL_BASE 0x2000
#define SCL_SPAN 16
#define SCL_END 0x200f
#define SCL_BIT_CLEARING_EDGE_REGISTER 0
#define SCL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SCL_CAPTURE 0
#define SCL_DATA_WIDTH 1
#define SCL_DO_TEST_BENCH_WIRING 0
#define SCL_DRIVEN_SIM_VALUE 0
#define SCL_EDGE_TYPE NONE
#define SCL_FREQ 50000000
#define SCL_HAS_IN 0
#define SCL_HAS_OUT 0
#define SCL_HAS_TRI 1
#define SCL_IRQ_TYPE NONE
#define SCL_RESET_VALUE 0

/*
 * Macros for device 'LCD_DATA', class 'altera_avalon_pio'
 * The macros are prefixed with 'LCD_DATA_'.
 * The prefix is the slave descriptor.
 */
#define LCD_DATA_COMPONENT_TYPE altera_avalon_pio
#define LCD_DATA_COMPONENT_NAME LCD_DATA
#define LCD_DATA_BASE 0x3000
#define LCD_DATA_SPAN 32
#define LCD_DATA_END 0x301f
#define LCD_DATA_BIT_CLEARING_EDGE_REGISTER 0
#define LCD_DATA_BIT_MODIFYING_OUTPUT_REGISTER 1
#define LCD_DATA_CAPTURE 0
#define LCD_DATA_DATA_WIDTH 16
#define LCD_DATA_DO_TEST_BENCH_WIRING 0
#define LCD_DATA_DRIVEN_SIM_VALUE 0
#define LCD_DATA_EDGE_TYPE NONE
#define LCD_DATA_FREQ 50000000
#define LCD_DATA_HAS_IN 1
#define LCD_DATA_HAS_OUT 1
#define LCD_DATA_HAS_TRI 0
#define LCD_DATA_IRQ_TYPE NONE
#define LCD_DATA_RESET_VALUE 0

/*
 * Macros for device 'LCD_CLK', class 'altera_avalon_pio'
 * The macros are prefixed with 'LCD_CLK_'.
 * The prefix is the slave descriptor.
 */
#define LCD_CLK_COMPONENT_TYPE altera_avalon_pio
#define LCD_CLK_COMPONENT_NAME LCD_CLK
#define LCD_CLK_BASE 0x4000
#define LCD_CLK_SPAN 32
#define LCD_CLK_END 0x401f
#define LCD_CLK_BIT_CLEARING_EDGE_REGISTER 0
#define LCD_CLK_BIT_MODIFYING_OUTPUT_REGISTER 1
#define LCD_CLK_CAPTURE 0
#define LCD_CLK_DATA_WIDTH 8
#define LCD_CLK_DO_TEST_BENCH_WIRING 0
#define LCD_CLK_DRIVEN_SIM_VALUE 0
#define LCD_CLK_EDGE_TYPE NONE
#define LCD_CLK_FREQ 50000000
#define LCD_CLK_HAS_IN 0
#define LCD_CLK_HAS_OUT 1
#define LCD_CLK_HAS_TRI 0
#define LCD_CLK_IRQ_TYPE NONE
#define LCD_CLK_RESET_VALUE 0

/*
 * Macros for device 'CAM_WR_EN', class 'altera_avalon_pio'
 * The macros are prefixed with 'CAM_WR_EN_'.
 * The prefix is the slave descriptor.
 */
#define CAM_WR_EN_COMPONENT_TYPE altera_avalon_pio
#define CAM_WR_EN_COMPONENT_NAME CAM_WR_EN
#define CAM_WR_EN_BASE 0x5000
#define CAM_WR_EN_SPAN 32
#define CAM_WR_EN_END 0x501f
#define CAM_WR_EN_BIT_CLEARING_EDGE_REGISTER 0
#define CAM_WR_EN_BIT_MODIFYING_OUTPUT_REGISTER 1
#define CAM_WR_EN_CAPTURE 0
#define CAM_WR_EN_DATA_WIDTH 8
#define CAM_WR_EN_DO_TEST_BENCH_WIRING 0
#define CAM_WR_EN_DRIVEN_SIM_VALUE 0
#define CAM_WR_EN_EDGE_TYPE NONE
#define CAM_WR_EN_FREQ 50000000
#define CAM_WR_EN_HAS_IN 0
#define CAM_WR_EN_HAS_OUT 1
#define CAM_WR_EN_HAS_TRI 0
#define CAM_WR_EN_IRQ_TYPE NONE
#define CAM_WR_EN_RESET_VALUE 0

/*
 * Macros for device 'CAM_FRAME_NUM', class 'altera_avalon_pio'
 * The macros are prefixed with 'CAM_FRAME_NUM_'.
 * The prefix is the slave descriptor.
 */
#define CAM_FRAME_NUM_COMPONENT_TYPE altera_avalon_pio
#define CAM_FRAME_NUM_COMPONENT_NAME CAM_FRAME_NUM
#define CAM_FRAME_NUM_BASE 0x5100
#define CAM_FRAME_NUM_SPAN 32
#define CAM_FRAME_NUM_END 0x511f
#define CAM_FRAME_NUM_BIT_CLEARING_EDGE_REGISTER 0
#define CAM_FRAME_NUM_BIT_MODIFYING_OUTPUT_REGISTER 1
#define CAM_FRAME_NUM_CAPTURE 0
#define CAM_FRAME_NUM_DATA_WIDTH 8
#define CAM_FRAME_NUM_DO_TEST_BENCH_WIRING 0
#define CAM_FRAME_NUM_DRIVEN_SIM_VALUE 0
#define CAM_FRAME_NUM_EDGE_TYPE NONE
#define CAM_FRAME_NUM_FREQ 50000000
#define CAM_FRAME_NUM_HAS_IN 1
#define CAM_FRAME_NUM_HAS_OUT 0
#define CAM_FRAME_NUM_HAS_TRI 0
#define CAM_FRAME_NUM_IRQ_TYPE NONE
#define CAM_FRAME_NUM_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x10000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x10007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1565100920

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x20000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x20007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8


#endif /* _ALTERA_HPS_0_H_ */
